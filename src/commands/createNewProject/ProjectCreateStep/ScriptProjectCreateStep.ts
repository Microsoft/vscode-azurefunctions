/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as fse from 'fs-extra';
import * as os from 'os';
import * as path from 'path';
import { gitignoreFileName, hostFileName, localSettingsFileName, ProjectRuntime, proxiesFileName } from '../../../constants';
import { ILocalAppSettings } from '../../../LocalAppSettings';
import { confirmOverwriteFile, writeFormattedJson } from "../../../utils/fs";
import { nonNullProp } from '../../../utils/nonNull';
import { getFunctionsWorkerRuntime } from '../../../vsCodeConfig/settings';
import { IProjectWizardContext } from '../IProjectWizardContext';
import { ProjectCreateStepBase } from './ProjectCreateStepBase';

// https://github.com/github/gitignore/blob/master/Node.gitignore
// tslint:disable-next-line:no-multiline-string
const gitignore: string = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Azure Functions artifacts
bin
obj
appsettings.json
local.settings.json

# TypeScript output
dist
out
`;

export class ScriptProjectCreateStep extends ProjectCreateStepBase {
    protected funcignore: string[] = ['.git*', '.vscode', 'local.settings.json', 'test'];
    protected supportsManagedDependencies: boolean = false;

    public async executeCore(wizardContext: IProjectWizardContext): Promise<void> {
        const runtime: ProjectRuntime = nonNullProp(wizardContext, 'runtime');
        const hostJsonPath: string = path.join(wizardContext.projectPath, hostFileName);
        if (await confirmOverwriteFile(hostJsonPath)) {
            const hostJson: object = this.getHostContent(runtime);
            await writeFormattedJson(hostJsonPath, hostJson);
        }

        const localSettingsJsonPath: string = path.join(wizardContext.projectPath, localSettingsFileName);
        if (await confirmOverwriteFile(localSettingsJsonPath)) {
            const localSettingsJson: ILocalAppSettings = {
                IsEncrypted: false,
                Values: {
                    AzureWebJobsStorage: ''
                }
            };

            const functionsWorkerRuntime: string | undefined = getFunctionsWorkerRuntime(wizardContext.language);
            if (functionsWorkerRuntime) {
                // tslint:disable-next-line:no-non-null-assertion
                localSettingsJson.Values!.FUNCTIONS_WORKER_RUNTIME = functionsWorkerRuntime;
            }

            await writeFormattedJson(localSettingsJsonPath, localSettingsJson);
        }

        const proxiesJsonPath: string = path.join(wizardContext.projectPath, proxiesFileName);
        if (await confirmOverwriteFile(proxiesJsonPath)) {
            await writeFormattedJson(proxiesJsonPath, {
                // tslint:disable-next-line:no-http-string
                $schema: 'http://json.schemastore.org/proxies',
                proxies: {}
            });
        }

        const gitignorePath: string = path.join(wizardContext.projectPath, gitignoreFileName);
        if (await confirmOverwriteFile(gitignorePath)) {
            await fse.writeFile(gitignorePath, gitignore);
        }

        const funcIgnorePath: string = path.join(wizardContext.projectPath, '.funcignore');
        if (await confirmOverwriteFile(funcIgnorePath)) {
            await fse.writeFile(funcIgnorePath, this.funcignore.sort().join(os.EOL));
        }
    }

    private getHostContent(runtime: ProjectRuntime): object {
        if (runtime === ProjectRuntime.v2) {
            if (this.supportsManagedDependencies) {
                return {
                    version: '2.0',
                    managedDependency: {
                        enabled: true
                    }
                };
            }

            return { version: '2.0' };
        }

        // runtime === ProjectRuntime.v1
        return {};
    }
}

[
    {
        "id": "BlobTrigger-CSharp",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myBlob",
                    "type": "blobTrigger",
                    "direction": "in",
                    "path": "samples-workitems/{name}",
                    "connection": ""
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "BlobTriggerCSharp",
            "description": "$BlobTrigger_description",
            "name": "Blob trigger",
            "language": "C#",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "blob",
            "enabledInTryMode": true,
            "userPrompt": [
                "connection",
                "path"
            ]
        },
        "files": {
            "BlobTriggerCSharp.csx": "public static void Run(Stream myBlob, string name, TraceWriter log)\r\n{\r\n    log.Info($\"C# Blob trigger function Processed blob\\n Name:{name} \\n Size: {myBlob.Length} Bytes\");\r\n}\r\n",
            "readme.md": "# BlobTrigger - C<span>#</span>\r\n\r\nThe `BlobTrigger` makes it incredibly easy to react to new Blobs inside of Azure Blob Storage. This sample demonstrates a simple use case of processing data from a given Blob using C#.\r\n\r\n## How it works\r\n\r\nFor a `BlobTrigger` to work, you provide a path which dictates where the blobs are located inside your container, and can also help restrict the types of blobs you wish to return. For instance, you can set the path to `samples/{name}.png` to restrict the trigger to only the samples path and only blobs with \".png\" at the end of their name.\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "sample.dat": "samples-workitems/workitem.txt"
        },
        "runtime": "beta"
    },
    {
        "id": "BlobTrigger-JavaScript",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myBlob",
                    "type": "blobTrigger",
                    "direction": "in",
                    "path": "samples-workitems/{name}",
                    "connection": ""
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "BlobTriggerJS",
            "description": "$BlobTrigger_description",
            "name": "Blob trigger",
            "language": "JavaScript",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "blob",
            "enabledInTryMode": true,
            "userPrompt": [
                "connection",
                "path"
            ]
        },
        "files": {
            "index.js": "module.exports = function (context, myBlob) {\r\n    context.log(\"JavaScript blob trigger function processed blob \\n Name:\", context.bindingData.name, \"\\n Blob Size:\", myBlob.length, \"Bytes\");\r\n    context.done();\r\n};",
            "readme.md": "# BlobTrigger - JavaScript\r\n\r\nThe `BlobTrigger` makes it incredibly easy to react to new Blobs inside of Azure Blob Storage. This sample demonstrates a simple use case of processing data from a given Blob using JavaScript.\r\n\r\n## How it works\r\n\r\nFor a `BlobTrigger` to work, you provide a path which dictates where the blobs are located inside your container, and can also help restrict the types of blobs you wish to return. For instance, you can set the path to `samples/{name}.png` to restrict the trigger to only the samples path and only blobs with \".png\" at the end of their name.\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "sample.dat": "samples-workitems/workitem.txt"
        },
        "runtime": "beta"
    },
    {
        "id": "DurableFunctionsActivity-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "name",
                    "type": "activityTrigger",
                    "direction": "in"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "Hello",
            "description": "$DurableFunctionsActivity_description",
            "name": "Durable Functions activity",
            "language": "C#",
            "category": [
                "$temp_category_durableFunctions"
            ],
            "categoryStyle": "other",
            "enabledInTryMode": false,
            "userPrompt": [],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.DurableTask",
                    "version": "1.0.0-beta"
                }
            ]
        },
        "files": {
            "run.csx": "/*\r\n * Before running this sample, please create a Durable Activity function (default name is \"hello\")\r\n */\r\n\r\n#r \"Microsoft.Azure.WebJobs.Extensions.DurableTask\"\r\n\r\npublic static string Run(string name)\r\n{\r\n    return $\"Hello {name}!\";\r\n}",
            "sample.dat": ""
        },
        "runtime": "beta"
    },
    {
        "id": "DurableFunctionsHttpStart-CSharp",
        "function": {
            "bindings": [
                {
                    "authLevel": "anonymous",
                    "name": "req",
                    "type": "httpTrigger",
                    "direction": "in",
                    "route": "orchestrators/{functionName}",
                    "methods": [
                        "post",
                        "get"
                    ]
                },
                {
                    "name": "$return",
                    "type": "http",
                    "direction": "out"
                },
                {
                    "name": "starter",
                    "type": "orchestrationClient",
                    "direction": "in"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "DurableFunctionsHttpStart",
            "description": "$DurableFunctionsHttpStart_description",
            "name": "Durable Functions HTTP starter",
            "language": "C#",
            "category": [
                "$temp_category_durableFunctions"
            ],
            "categoryStyle": "other",
            "enabledInTryMode": false,
            "userPrompt": [],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.DurableTask",
                    "version": "1.0.0-beta"
                }
            ]
        },
        "files": {
            "run.csx": "#r \"Microsoft.Azure.WebJobs.Extensions.DurableTask\"\r\n#r \"Newtonsoft.Json\"\r\n\r\nusing System.Net;\r\n\r\npublic static async Task<HttpResponseMessage> Run(\r\n    HttpRequestMessage req,\r\n    DurableOrchestrationClient starter,\r\n    string functionName,\r\n    TraceWriter log)\r\n{\r\n    // Function input comes from the request content.\r\n    dynamic eventData = await req.Content.ReadAsAsync<object>();\r\n    string instanceId = await starter.StartNewAsync(functionName, eventData);\r\n\r\n    log.Info($\"Started orchestration with ID = '{instanceId}'.\");\r\n\r\n    return starter.CreateCheckStatusResponse(req, instanceId);\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "DurableFunctionsOrchestrator-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "context",
                    "type": "orchestrationTrigger",
                    "direction": "in"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "DurableFunctionsOrchestratorCSharp",
            "description": "$DurableFunctionsOrchestrator_description",
            "name": "Durable Functions orchestrator",
            "language": "C#",
            "category": [
                "$temp_category_durableFunctions"
            ],
            "categoryStyle": "other",
            "enabledInTryMode": false,
            "userPrompt": [],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.DurableTask",
                    "version": "1.0.0-beta"
                }
            ]
        },
        "files": {
            "run.csx": "/*\r\n * Before running this sample, please create a Durable Activity function (default name is \"hello\")\r\n */\r\n\r\n#r \"Microsoft.Azure.WebJobs.Extensions.DurableTask\"\r\n\r\npublic static async Task<List<string>> Run(DurableOrchestrationContext context)\r\n{\r\n    var outputs = new List<string>();\r\n\r\n    // Replace \"hello\" with the name of your Durable Activity Function.\r\n    outputs.Add(await context.CallActivityAsync<string>(\"Hello\", \"Tokyo\"));\r\n    outputs.Add(await context.CallActivityAsync<string>(\"Hello\", \"Seattle\"));\r\n    outputs.Add(await context.CallActivityAsync<string>(\"Hello\", \"London\"));\r\n\r\n    // returns [\"Hello Tokyo!\", \"Hello Seattle!\", \"Hello London!\"]\r\n    return outputs;\r\n}",
            "sample.dat": ""
        },
        "runtime": "beta"
    },
    {
        "id": "EventHubTrigger-CSharp",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "type": "eventHubTrigger",
                    "name": "myEventHubMessage",
                    "direction": "in",
                    "eventHubName": "samples-workitems",
                    "connection": "",
                    "consumerGroup": "$Default"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "EventHubTriggerCSharp",
            "description": "$EventHubTrigger_description",
            "name": "Event Hub trigger",
            "language": "C#",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "eventHub",
            "enabledInTryMode": false,
            "userPrompt": [
                "connection",
                "eventHubName",
                "consumerGroup"
            ],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.EventHubs",
                    "version": "3.0.0-beta3"
                }
            ]
        },
        "files": {
            "run.csx": "using System;\r\n\r\npublic static void Run(string myEventHubMessage, TraceWriter log)\r\n{\r\n    log.Info($\"C# Event Hub trigger function processed a message: {myEventHubMessage}\");\r\n}\r\n",
            "sample.dat": "Test Message"
        },
        "runtime": "beta"
    },
    {
        "id": "HttpTrigger-CSharp",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "authLevel": "function",
                    "name": "req",
                    "type": "httpTrigger",
                    "direction": "in",
                    "methods": [
                        "get",
                        "post"
                    ]
                },
                {
                    "name": "$return",
                    "type": "http",
                    "direction": "out"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "HttpTriggerCSharp",
            "description": "$HttpTrigger_description",
            "name": "HTTP trigger",
            "language": "C#",
            "category": [
                "$temp_category_core",
                "$temp_category_api"
            ],
            "categoryStyle": "http",
            "enabledInTryMode": true,
            "userPrompt": [
                "authLevel"
            ]
        },
        "files": {
            "readme.md": "# HttpTrigger - C<span>#</span>\r\n\r\nThe `HttpTrigger` makes it incredibly easy to have your functions executed via an HTTP call to your function.\r\n\r\n## How it works\r\n\r\nWhen you call the function, be sure you checkout which security rules you apply. If you're using an apikey, you'll need to include that in your request.\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "run.csx": "#r \"Newtonsoft.Json\"\r\n\r\nusing System.Net;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Newtonsoft.Json;\r\n\r\npublic static IActionResult Run(HttpRequest req, TraceWriter log)\r\n{\r\n    log.Info(\"C# HTTP trigger function processed a request.\");\r\n\r\n    string name = req.Query[\"name\"];\r\n\r\n    string requestBody = new StreamReader(req.Body).ReadToEnd();\r\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\r\n    name = name ?? data?.name;\r\n\r\n    return name != null\r\n        ? (ActionResult)new OkObjectResult($\"Hello, {name}\")\r\n        : new BadRequestObjectResult(\"Please pass a name on the query string or in the request body\");\r\n}\r\n",
            "sample.dat": "{\r\n    \"name\": \"Azure\"\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "HttpTrigger-JavaScript",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "authLevel": "function",
                    "type": "httpTrigger",
                    "direction": "in",
                    "name": "req"
                },
                {
                    "type": "http",
                    "direction": "out",
                    "name": "res"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "HttpTriggerJS",
            "description": "$HttpTrigger_description",
            "name": "HTTP trigger",
            "language": "JavaScript",
            "trigger": "HttpTrigger",
            "category": [
                "$temp_category_core",
                "$temp_category_api"
            ],
            "categoryStyle": "http",
            "enabledInTryMode": true,
            "userPrompt": [
                "authLevel"
            ]
        },
        "files": {
            "index.js": "module.exports = function (context, req) {\r\n    context.log('JavaScript HTTP trigger function processed a request.');\r\n\r\n    if (req.query.name || (req.body && req.body.name)) {\r\n        context.res = {\r\n            // status: 200, /* Defaults to 200 */\r\n            body: \"Hello \" + (req.query.name || req.body.name)\r\n        };\r\n    }\r\n    else {\r\n        context.res = {\r\n            status: 400,\r\n            body: \"Please pass a name on the query string or in the request body\"\r\n        };\r\n    }\r\n    context.done();\r\n};",
            "sample.dat": "{\r\n    \"name\": \"Azure\"\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "OutlookMessageWebhookCreator-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "req",
                    "type": "httpTrigger",
                    "direction": "in"
                },
                {
                    "type": "graphWebhookSubscription",
                    "name": "clientState",
                    "direction": "out",
                    "action": "create",
                    "subscriptionResource": "me/mailFolders('Inbox')/messages",
                    "changeTypes": [
                        "created"
                    ],
                    "identity": "userFromRequest"
                },
                {
                    "type": "http",
                    "name": "$return",
                    "direction": "out"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "OutlookMessageWebhookCreatorCSharp",
            "description": "$OutlookMessageWebhookCreator_description",
            "name": "Outlook message webhook creator",
            "language": "C#",
            "enabledInTryMode": false,
            "category": [
                "$temp_category_msgraph"
            ],
            "categoryStyle": "other",
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.MicrosoftGraph",
                    "version": "1.0.0-beta1"
                }
            ],
            "AADPermissions": [
                {
                    "resourceAppId": "00000002-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6"
                        }
                    ]
                },
                {
                    "resourceAppId": "00000003-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "570282fd-fa5c-430d-a7fd-fc8dc98a9dca"
                        }
                    ]
                }
            ]
        },
        "files": {
            "run.csx": "using System;\r\nusing System.Net;\r\n\r\npublic static HttpResponseMessage run(HttpRequestMessage req, out string clientState, TraceWriter log)\r\n{\r\n    log.Info(\"C# HTTP trigger function processed a request.\");\r\n\tclientState = Guid.NewGuid().ToString();\r\n\treturn new HttpResponseMessage(HttpStatusCode.OK);\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "OutlookMessageWebhookDeleter-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "req",
                    "type": "httpTrigger",
                    "direction": "in"
                },
                {
                    "type": "graphWebhookSubscription",
                    "name": "existingSubscriptions",
                    "direction": "in",
                    "filter": "userFromRequest"
                },
                {
                    "type": "graphWebhookSubscription",
                    "name": "subscriptionsToDelete",
                    "direction": "out",
                    "action": "delete",
                    "identity": "userFromRequest"
                },
                {
                    "type": "http",
                    "name": "res",
                    "direction": "out"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "OutlookMessageWebhookDeleterCSharp",
            "description": "$OutlookMessageWebhookDeleter_description",
            "name": "Outlook message webhook deleter",
            "language": "C#",
            "enabledInTryMode": false,
            "category": [
                "$temp_category_msgraph"
            ],
            "categoryStyle": "other",
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.MicrosoftGraph",
                    "version": "1.0.0-beta1"
                }
            ],
            "AADPermissions": [
                {
                    "resourceAppId": "00000002-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6"
                        }
                    ]
                },
                {
                    "resourceAppId": "00000003-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "570282fd-fa5c-430d-a7fd-fc8dc98a9dca"
                        }
                    ]
                }
            ]
        },
        "files": {
            "run.csx": "using System.Net;\r\n\r\npublic static async Task Run(HttpRequest req, string[] existingSubscriptions, IAsyncCollector<string> subscriptionsToDelete, TraceWriter log)\r\n{\r\n    log.Info(\"C# HTTP trigger function processed a request.\");\r\n    foreach (var subscription in existingSubscriptions)\r\n    {\r\n        log.Info($\"Deleting subscription {subscription}\");\r\n        await subscriptionsToDelete.AddAsync(subscription);\r\n    }\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "OutlookMessageWebhookHandler-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "msg",
                    "type": "graphWebhookTrigger",
                    "direction": "in",
                    "resourceType": "#Microsoft.Graph.Message"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "OutlookMessageWebhookHandlerCSharp",
            "description": "$OutlookMessageWebhookHandler_description",
            "name": "Outlook message webhook handler",
            "language": "C#",
            "enabledInTryMode": false,
            "category": [
                "$temp_category_msgraph"
            ],
            "categoryStyle": "other",
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.MicrosoftGraph",
                    "version": "1.0.0-beta1"
                }
            ],
            "AADPermissions": [
                {
                    "resourceAppId": "00000002-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6"
                        }
                    ]
                },
                {
                    "resourceAppId": "00000003-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "570282fd-fa5c-430d-a7fd-fc8dc98a9dca"
                        }
                    ]
                }
            ]
        },
        "files": {
            "run.csx": "#r \"Microsoft.Graph\"\r\nusing Microsoft.Graph;\r\nusing System.Net;\r\n\r\npublic static async Task Run(Message msg, TraceWriter log)  \r\n{\r\n\tlog.Info(\"Microsoft Graph webhook trigger function processed a request.\");\r\n\r\n    // Testable by sending an email with the Subject \"[DEMO] Azure Functions\" and some text body\r\n    if (msg.Subject.Contains(\"[DEMO] Azure Functions\")) {\r\n        log.Info($\"Processed email: {msg.BodyPreview}\");\r\n    }\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "ProfilePhotoAPI-CSharp",
        "function": {
            "bindings": [
                {
                    "name": "req",
                    "type": "httpTrigger",
                    "direction": "in",
                    "authLevel": "anonymous",
                    "methods": [
                        "get"
                    ]
                },
                {
                    "name": "graphToken",
                    "type": "token",
                    "direction": "in",
                    "resource": "https://graph.microsoft.com",
                    "identity": "userFromRequest"
                },
                {
                    "name": "$return",
                    "type": "http",
                    "direction": "out"
                }
            ],
            "disabled": false
        },
        "metadata": {
            "defaultFunctionName": "ProfilePhotoAPICSharp",
            "description": "$ProfilePhotoAPI_description",
            "name": "Microsoft Graph profile photo API",
            "trigger": "HttpTrigger",
            "language": "C#",
            "enabledInTryMode": false,
            "category": [
                "$temp_category_msgraph"
            ],
            "categoryStyle": "other",
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.MicrosoftGraph",
                    "version": "1.0.0-beta1"
                }
            ],
            "AADPermissions": [
                {
                    "resourceAppId": "00000002-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "type": "Scope",
                            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6"
                        }
                    ]
                }
            ]
        },
        "files": {
            "run.csx": "using System.Net; \r\nusing System.Net.Http; \r\nusing System.Net.Http.Headers; \r\n\r\npublic static async Task<HttpResponseMessage> Run(HttpRequestMessage req, string graphToken, TraceWriter log)\r\n{\r\n    log.Info(\"C# HTTP trigger function processed a request.\");    \r\n    HttpClient client = new HttpClient();\r\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", graphToken);\r\n    return await client.GetAsync(\"https://graph.microsoft.com/v1.0/me/photo/$value\");\r\n}"
        },
        "runtime": "beta"
    },
    {
        "id": "QueueTrigger-CSharp",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myQueueItem",
                    "type": "queueTrigger",
                    "direction": "in",
                    "queueName": "myqueue-items",
                    "connection": ""
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "QueueTriggerCSharp",
            "description": "$QueueTrigger_description",
            "name": "Queue trigger",
            "language": "C#",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "queue",
            "enabledInTryMode": true,
            "userPrompt": [
                "connection",
                "queueName"
            ]
        },
        "files": {
            "readme.md": "# QueueTrigger - C<span>#</span>\r\n\r\nThe `QueueTrigger` makes it incredibly easy to react to new Queues inside of Azure Queue Storage. This sample demonstrates a simple use case of processing data from a given Queue using C#.\r\n\r\n## How it works\r\n\r\nFor a `QueueTrigger` to work, you must provide a queue name that defines the queue messages will be read from.\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "run.csx": "using System;\r\n\r\npublic static void Run(string myQueueItem, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n}\r\n",
            "sample.dat": "sample queue data"
        },
        "runtime": "beta"
    },
    {
        "id": "QueueTrigger-JavaScript",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myQueueItem",
                    "type": "queueTrigger",
                    "direction": "in",
                    "queueName": "js-queue-items",
                    "connection": ""
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "QueueTriggerJS",
            "description": "$QueueTrigger_description",
            "name": "Queue trigger",
            "language": "JavaScript",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "queue",
            "enabledInTryMode": true,
            "userPrompt": [
                "connection",
                "queueName"
            ]
        },
        "files": {
            "index.js": "module.exports = function (context, myQueueItem) {\r\n    context.log('JavaScript queue trigger function processed work item', myQueueItem);\r\n    context.done();\r\n};",
            "readme.md": "# QueueTrigger - JavaScript\r\n\r\nThe `QueueTrigger` makes it incredibly easy to react to new Queues inside of Azure Queue Storage. This sample demonstrates a simple use case of processing data from a given Queue using C#.\r\n\r\n## How it works\r\n\r\nFor a `QueueTrigger` to work, you provide a path which dictates where the queue messages are located inside your container.\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "sample.dat": "sample queue data"
        },
        "runtime": "beta"
    },
    {
        "id": "SendGrid-CSharp",
        "function": {
            "bindings": [
                {
                    "type": "queueTrigger",
                    "name": "order",
                    "direction": "in",
                    "queueName": "samples-orders-csharp"
                },
                {
                    "type": "sendGrid",
                    "name": "$return",
                    "direction": "out",
                    "apiKey": "SendGridApiKey",
                    "from": "Azure Functions <samples@functions.com>",
                    "to": "{CustomerEmail}"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "SendGridCSharp",
            "description": "$SendGrid_description",
            "name": "SendGrid",
            "language": "C#",
            "category": [
                "$temp_category_samples",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "other",
            "enabledInTryMode": false,
            "userPrompt": [
                "to",
                "from",
                "apiKey"
            ],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.SendGrid",
                    "version": "3.0.0-beta3"
                }
            ]
        },
        "files": {
            "run.csx": "#r \"SendGrid\"\r\n\r\nusing System;\r\nusing SendGrid.Helpers.Mail;\r\nusing Microsoft.Azure.WebJobs.Host;\r\n\r\n// The 'From' and 'To' fields are automatically populated with the values specified by the binding settings.\r\n//\r\n// You can also optionally configure the default From/To addresses globally via host.config, e.g.:\r\n//\r\n// {\r\n//   \"sendGrid\": {\r\n//      \"to\": \"user@host.com\",\r\n//      \"from\": \"Azure Functions <samples@functions.com>\"\r\n//   }\r\n// }\r\npublic static SendGridMessage Run(Order order, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed order: {order.OrderId}\");\r\n    \r\n    SendGridMessage message = new SendGridMessage()\r\n    {\r\n        Subject = $\"Thanks for your order (#{order.OrderId})!\"\r\n    };    \r\n\r\n    message.AddContent(\"text/plain\",$\"{order.CustomerName}, your order ({order.OrderId}) is being processed!\");    \r\n    return message;\r\n}\r\n\r\npublic class Order\r\n{\r\n    public string OrderId { get; set; }\r\n    public string CustomerName { get; set; }\r\n    public string CustomerEmail { get; set; }\r\n}",
            "sample.dat": "{ \"OrderId\": 12345, \"CustomerName\": \"Joe Schmoe\", \"CustomerEmail\": \"joeschmoe@foo.com\" }"
        },
        "runtime": "beta"
    },
    {
        "id": "SendGrid-JavaScript",
        "function": {
            "bindings": [
                {
                    "type": "queueTrigger",
                    "name": "order",
                    "direction": "in",
                    "queueName": "samples-orders"
                },
                {
                    "type": "sendGrid",
                    "name": "message",
                    "direction": "out",
                    "apiKey": "SendGridApiKey",
                    "from": "Azure Functions <samples@functions.com>",
                    "to": "{customerEmail}"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "SendGridJS",
            "description": "$SendGrid_description",
            "name": "SendGrid",
            "language": "JavaScript",
            "category": [
                "$temp_category_samples",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "other",
            "enabledInTryMode": false,
            "userPrompt": [
                "to",
                "from",
                "subject",
                "text",
                "apiKey"
            ],
            "extensions": [
                {
                    "id": "Microsoft.Azure.WebJobs.Extensions.SendGrid",
                    "version": "3.0.0-beta3"
                }
            ]
        },
        "files": {
            "index.js": "var util = require('util');\r\n\r\n// The 'From' and 'To' fields are automatically populated with the values specified by the binding settings.\r\n//\r\n// You can also optionally configure the default From/To addresses globally via host.config, e.g.:\r\n//\r\n// {\r\n//   \"sendGrid\": {\r\n//      \"to\": \"user@host.com\",\r\n//      \"from\": \"Azure Functions <samples@functions.com>\"\r\n//   }\r\n// }\r\nmodule.exports = function (context, order) {\r\n    context.log('JavaScript queue trigger function processed order', order.orderId);\r\n\r\n    context.done(null, {\r\n        message: {\r\n            subject: util.format('Thanks for your order (#%d)!', order.orderId),\r\n            content: [{\r\n                type: 'text/plain',\r\n                value: util.format(\"%s, your order (%d) is being processed!\", order.customerName, order.orderId)\r\n            }]\r\n        }\r\n    });\r\n}",
            "sample.dat": "{ \"orderId\": 12345, \"customerName\": \"Joe Schmoe\", \"customerEmail\": \"joeschmoe@foo.com\" }"
        },
        "runtime": "beta"
    },
    {
        "id": "TimerTrigger-CSharp",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myTimer",
                    "type": "timerTrigger",
                    "direction": "in",
                    "schedule": "0 */5 * * * *"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "TimerTriggerCSharp",
            "description": "$TimerTrigger_description",
            "name": "Timer trigger",
            "language": "C#",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "timer",
            "enabledInTryMode": true,
            "userPrompt": [
                "schedule"
            ]
        },
        "files": {
            "readme.md": "# TimerTrigger - C<span>#</span>\r\n\r\nThe `TimerTrigger` makes it incredibly easy to have your functions executed on a schedule. This sample demonstrates a simple use case of calling your function every 5 minutes.\r\n\r\n## How it works\r\n\r\nFor a `TimerTrigger` to work, you provide a schedule in the form of a [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression)(See the link for full details). A cron expression is a string with 6 separate expressions which represent a given schedule via patterns. The pattern we use to represent every 5 minutes is `0 */5 * * * *`. This, in plain text, means: \"When seconds is equal to 0, minutes is divisible by 5, for any hour, day of the month, month, day of the week, or year\".\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "run.csx": "using System;\r\n\r\npublic static void Run(TimerInfo myTimer, TraceWriter log)\r\n{\r\n    log.Info($\"C# Timer trigger function executed at: {DateTime.Now}\");\r\n}\r\n",
            "sample.dat": ""
        },
        "runtime": "beta"
    },
    {
        "id": "TimerTrigger-JavaScript",
        "function": {
            "disabled": false,
            "bindings": [
                {
                    "name": "myTimer",
                    "type": "timerTrigger",
                    "direction": "in",
                    "schedule": "0 */5 * * * *"
                }
            ]
        },
        "metadata": {
            "defaultFunctionName": "TimerTriggerJS",
            "description": "$TimerTrigger_description",
            "name": "Timer trigger",
            "language": "JavaScript",
            "category": [
                "$temp_category_core",
                "$temp_category_dataProcessing"
            ],
            "categoryStyle": "timer",
            "enabledInTryMode": true,
            "userPrompt": [
                "schedule"
            ]
        },
        "files": {
            "index.js": "module.exports = function (context, myTimer) {\r\n    var timeStamp = new Date().toISOString();\r\n    \r\n    if(myTimer.isPastDue)\r\n    {\r\n        context.log('JavaScript is running late!');\r\n    }\r\n    context.log('JavaScript timer trigger function ran!', timeStamp);   \r\n    \r\n    context.done();\r\n};",
            "readme.md": "# TimerTrigger - JavaScript\r\n\r\nThe `TimerTrigger` makes it incredibly easy to have your functions executed on a schedule. This sample demonstrates a simple use case of calling your function every 5 minutes.\r\n\r\n## How it works\r\n\r\nFor a `TimerTrigger` to work, you provide a schedule in the form of a [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression)(See the link for full details). A cron expression is a string with 6 separate expressions which represent a given schedule via patterns. The pattern we use to represent every 5 minutes is `0 */5 * * * *`. This, in plain text, means: \"When seconds is equal to 0, minutes is divisible by 5, for any hour, day of the month, month, day of the week, or year\".\r\n\r\n## Learn more\r\n\r\n<TODO> Documentation",
            "sample.dat": ""
        },
        "runtime": "beta"
    }
]
